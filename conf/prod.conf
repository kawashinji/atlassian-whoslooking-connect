# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret=${APP_SECRET}

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
application.global=global.Global

# Router 
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point. 
# Furthermore, it's assumed your route file is named properly. 
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router=my.application.Routes

# Database configuration
# ~~~~~ 
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""
#
# You can expose this datasource via JNDI if needed (Useful for JPA)
# db.default.jndiName=DefaultDS

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
#
ebean.default="models.*"

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=INFO

ac.key=whoslooking-connect
ac.key=${?AC_KEY}

ac.name="Who's Looking for OnDemand"
ac.token.expiry.secs=604800

db.default.driver=org.postgresql.Driver
db.default.url="jdbc:postgresql:whoslooking"
db.default.partitionCount=1
db.default.maxConnectionsPerPartition=5
db.default.maxConnectionsPerPartition=${?PG_MAX_CONNECTIONS_PER_PARTITION}
db.default.minConnectionsPerPartition=1
db.default.minConnectionsPerPartition=${?PG_MIN_CONNECTIONS_PER_PARTITION}
db.default.acquireIncrement=1
db.default.acquireRetryAttempts=1
db.default.acquireRetryDelay=5 seconds
db.default.jndiName=DefaultDS
jpa.default=defaultPersistenceUnit

redis.pool.maxActive=5
redis.pool.maxActive=${?REDIS_POOL_MAXACTIVE}
redis.pool.maxWait=5000
redis.pool.maxWait=${?REDIS_POOL_MAX_WAIT}
redis.timeout=5000
redis.timeout=${?REDIS_TIMEOUT}

ehcacheplugin=disabled

whoslooking.poller-interval.seconds=15
whoslooking.poller-interval.seconds=${?WHOSLOOKING_POLLER_INTERVAL_SECONDS}
whoslooking.viewer-expiry.seconds=300
whoslooking.viewer-expiry.seconds=${?WHOSLOOKING_VIEWER_EXPIRY_SECONDS}
whoslooking.viewer-set-expiry.seconds=172800
whoslooking.viewer-set-expiry.seconds=${?WHOSLOOKING_VIEWERSET_EXPIRY_SECONDS}
whoslooking.display-name-cache-expiry.seconds=172800
whoslooking.display-name-cache-expiry.seconds=${?WHOSLOOKING_NAME_CACHE_EXPIRY_SECONDS}
whoslooking.avatar-size=24

promise.akka.actor.typed.timeout=15s
promise.akka.actor.typed.timeout=${?AKKA_PROMIS_TIMEOUT}
play {
  akka {
    loglevel = DEBUG
    actor {
      default-dispatcher = {
        fork-join-executor {
          parallelism-factor = 4.0
        }
      }
      actions-dispatcher = {
        fork-join-executor {
          parallelism-factor = 4.0
        }
      }
    }
  }
}

whoslooking.feature.metrics=true
whoslooking.feature.metrics=${?WHOSLOOKING_FEATURE_METRICS}
whoslooking.feature.display-name-fetch=true
whoslooking.feature.display-name-fetch=${?WHOSLOOKING_FEATURE_DISPLAY_NAME_FETCH}
whoslooking.feature.display-name-fetch-blacklist=true
whoslooking.feature.display-name-fetch-blacklist=${?WHOSLOOKING_FEATURE_DISPLAY_NAME_FETCH_BLACKLIST}

atlassian.deployment.versions=${ATLASSIAN_DEPLOYMENT_VERSIONS}

com.atlassian.connect.jwt.expiry_seconds=86400